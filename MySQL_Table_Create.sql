USE facer;

-- DROP TABLE IF EXISTS MESSAGE_RECIPIENT CASCADE;
-- DROP TABLE IF EXISTS MESSAGE CASCADE;

DROP TABLE IF EXISTS APPLICATION_STATUS_HISTORY CASCADE;
DROP TABLE IF EXISTS INCIDENT_ASSIGNMENT CASCADE;
DROP TABLE IF EXISTS INCIDENT_EVENT CASCADE;
DROP TABLE IF EXISTS INCIDENT CASCADE;
DROP TABLE IF EXISTS EVENT CASCADE;

-- DROP TABLE IF EXISTS SUBSCRIPTION CASCADE;
-- DROP TABLE IF EXISTS RULES CASCADE;

DROP TABLE IF EXISTS USER_ACTIVITY CASCADE;
DROP TABLE IF EXISTS USER_CONTACT CASCADE;
DROP TABLE IF EXISTS USER_LOGIN CASCADE;

DROP TABLE IF EXISTS STD_MESSAGE_TYPE CASCADE;
DROP TABLE IF EXISTS STD_CONTACT_TYPE CASCADE;
DROP TABLE IF EXISTS STD_INCIDENT_TYPE CASCADE;
DROP TABLE IF EXISTS STD_EVENT_TYPE CASCADE;
DROP TABLE IF EXISTS STD_SEVERITY CASCADE;
DROP TABLE IF EXISTS STD_APPLICATION_STATUS CASCADE;
DROP TABLE IF EXISTS STD_COMPONENT CASCADE;
DROP TABLE IF EXISTS STD_APPLICATION CASCADE;
-- DROP TABLE IF EXISTS STD_SYSTEM CASCADE;

-- =========================
-- STD_System
-- =========================
/*--
CREATE TABLE IF NOT EXISTS STD_SYSTEM (
    SYSTEM_ID INTEGER NOT NULL AUTO_INCREMENT,
    SYSTEM_NAME VARCHAR(80) NOT NULL,
    CREATE_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP () NOT NULL,
    EXPIRE_DATE TIMESTAMP NULL,
    PRIMARY KEY (SYSTEM_ID),
    UNIQUE KEY (SYSTEM_NAME)
);

INSERT INTO STD_SYSTEM ( SYSTEM_NAME )
VALUES ('CAI Chicago');

commit;

-- SELECT * FROM STD_SYSTEM;
*/

-- =========================
-- STD_Application
-- =========================
CREATE TABLE IF NOT EXISTS STD_APPLICATION (
  APPLICATION_ID			integer				NOT NULL	auto_increment
, APPLICATION_NAME	varchar(80)		NOT NULL
, CREATE_DATE			timestamp 	DEFAULT CURRENT_TIMESTAMP()		NOT NULL
, EXPIRE_DATE				TIMESTAMP         NULL
, PRIMARY KEY ( APPLICATION_ID )
, UNIQUE KEY ( APPLICATION_NAME )
);

INSERT INTO STD_APPLICATION ( APPLICATION_NAME )
SELECT 'ARMS'
UNION SELECT 'CASHIERING'
UNION SELECT 'HAN' 
UNION SELECT 'IRIS';

commit;

-- SELECT * FROM STD_APPLICATION;

-- =========================
-- STD_Component
-- =========================
CREATE TABLE IF NOT EXISTS STD_COMPONENT (
  COMPONENT_ID			integer				NOT NULL	auto_increment
, APPLICATION_ID					integer				NOT NULL
, COMPONENT_NAME	varchar(80)		NOT NULL
, CREATE_DATE			timestamp 	DEFAULT CURRENT_TIMESTAMP()		NOT NULL
, EXPIRE_DATE				TIMESTAMP         NULL
, PRIMARY KEY ( COMPONENT_ID )
, UNIQUE KEY ( APPLICATION_ID, COMPONENT_NAME )
, CONSTRAINT SC_APPLICATION_ID_FK
	FOREIGN KEY (APPLICATION_ID)
    REFERENCES STD_APPLICATION (APPLICATION_ID)
);

INSERT INTO STD_COMPONENT ( APPLICATION_ID, COMPONENT_NAME )
-- ARMS
SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'ARMS' ) as APPLICATION_ID, 'ARMS' as COMPONENT_NAME
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'ARMS' ) as APPLICATION_ID, 'AHMS' as COMPONENT_NAME
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'ARMS' ) as APPLICATION_ID, 'BUILDINGS' as COMPONENT_NAME
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'ARMS' ) as APPLICATION_ID, 'COST RECOVERY' as COMPONENT_NAME
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'ARMS' ) as APPLICATION_ID, 'EMPLOYEE DEBT' as COMPONENT_NAME
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'ARMS' ) as APPLICATION_ID, 'EMS' as COMPONENT_NAME
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'ARMS' ) as APPLICATION_ID, 'STATE TAX OFFSET PROGRAM' as COMPONENT_NAME
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'ARMS' ) as APPLICATION_ID, 'TAX' as COMPONENT_NAME
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'ARMS' ) as APPLICATION_ID, 'TRAFFIC CONTROL' as COMPONENT_NAME
-- Cashiering
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'CASHIERING' ) as APPLICATION_ID, 'CASHIERING' as COMPONENT_NAME
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'CASHIERING' ) as APPLICATION_ID, 'LOCKBOX' as COMPONENT_NAME
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'CASHIERING' ) as APPLICATION_ID, 'PAYMENT MANAGER' as COMPONENT_NAME
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'CASHIERING' ) as APPLICATION_ID, 'PAYMENT PORTAL' as COMPONENT_NAME
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'CASHIERING' ) as APPLICATION_ID, 'POS SECURE' as COMPONENT_NAME
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'CASHIERING' ) as APPLICATION_ID, 'DATA BROKER' as COMPONENT_NAME
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'CASHIERING' ) as APPLICATION_ID, 'PAYMENT SERVER' as COMPONENT_NAME
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'CASHIERING' ) as APPLICATION_ID, 'TENDER RETAIL MULTI' as COMPONENT_NAME
-- HAN
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'HAN' ) as APPLICATION_ID, 'HAN' as COMPONENT_NAME
-- IRIS
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'IRIS' ) as APPLICATION_ID, 'IRIS' as COMPONENT_NAME
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'IRIS' ) as APPLICATION_ID, 'ADJUDICATION' as COMPONENT_NAME
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'IRIS' ) as APPLICATION_ID, 'APS' as COMPONENT_NAME
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'IRIS' ) as APPLICATION_ID, 'IMAGING' as COMPONENT_NAME
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'IRIS' ) as APPLICATION_ID, 'INVESTIGATION' as COMPONENT_NAME
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'IRIS' ) as APPLICATION_ID, 'LICENSE' as COMPONENT_NAME
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'IRIS' ) as APPLICATION_ID, 'PERMIT' as COMPONENT_NAME
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'IRIS' ) as APPLICATION_ID, 'PUBLIC VEHICLE' as COMPONENT_NAME
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'IRIS' ) as APPLICATION_ID, 'SECURITY' as COMPONENT_NAME
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'IRIS' ) as APPLICATION_ID, 'TAX' as COMPONENT_NAME
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'IRIS' ) as APPLICATION_ID, 'CBLAS' as COMPONENT_NAME
UNION SELECT ( SELECT APPLICATION_ID FROM STD_APPLICATION WHERE APPLICATION_NAME = 'IRIS' ) as APPLICATION_ID, 'WEBTAX' as COMPONENT_NAME;

commit;

-- SELECT * FROM STD_COMPONENT;

-- =========================
-- STD_Application_Status
-- =========================
CREATE TABLE IF NOT EXISTS STD_APPLICATION_STATUS (
  APPLICATION_STATUS_ID		integer				NOT NULL	auto_increment
, APPLICATION_STATUS_NAME	varchar(20)			NOT NULL
, SORT_ORDER				integer			DEFAULT 0 		NOT NULL
, CREATE_DATE			timestamp 			DEFAULT CURRENT_TIMESTAMP()		NOT NULL
, PRIMARY KEY ( APPLICATION_STATUS_ID )
, UNIQUE KEY `SAS_APPL_STATUS_NAME_UI` ( APPLICATION_STATUS_NAME )
);

INSERT INTO STD_APPLICATION_STATUS ( APPLICATION_STATUS_NAME, SORT_ORDER )
SELECT 'GREEN', 0
UNION SELECT 'YELLOW', 1
UNION SELECT 'RED', 2;

commit;

-- SELECT * FROM STD_APPLICATION_STATUS;

-- =========================
-- STD_Severity
-- =========================
CREATE TABLE IF NOT EXISTS STD_SEVERITY (
  SEVERITY_ID			integer				NOT NULL	auto_increment
, SEVERITY_NAME			varchar(20)			NOT NULL
, SORT_ORDER			integer				DEFAULT 0 		NOT NULL
 , CREATE_DATE			timestamp 			DEFAULT CURRENT_TIMESTAMP()		NOT NULL
, PRIMARY KEY ( SEVERITY_ID )
, UNIQUE KEY `S_SEVERITY_NAME_UI` ( SEVERITY_NAME )
);

INSERT INTO STD_SEVERITY ( SEVERITY_NAME, SORT_ORDER )
SELECT 'MILD', 0
UNION SELECT 'MEDIUM', 1
UNION SELECT 'SEVERE', 2;

commit;

-- SELECT * FROM STD_SEVERITY;

-- =========================
-- STD_Event_Type
-- =========================
CREATE TABLE IF NOT EXISTS STD_EVENT_TYPE (
  EVENT_TYPE_ID		integer			NOT NULL	auto_increment
, COMPONENT_ID		integer		 	NOT NULL
, EVENT_NAME		varchar(30)		NOT NULL
, CREATE_DATE		timestamp 		DEFAULT CURRENT_TIMESTAMP()		NOT NULL
, PRIMARY KEY ( EVENT_TYPE_ID )
, UNIQUE KEY `SET_COMP_EVENT_UI` ( COMPONENT_ID, EVENT_NAME )
, CONSTRAINT SET_COMPONENT_ID_FK
	FOREIGN KEY ( COMPONENT_ID )
    REFERENCES STD_COMPONENT ( COMPONENT_ID )
);


-- =========================
-- STD_Incident_Type
-- =========================
CREATE TABLE IF NOT EXISTS STD_INCIDENT_TYPE (
  INCIDENT_TYPE_ID	integer			NOT NULL	auto_increment
, COMPONENT_ID		integer		 	NOT NULL
, INCIDENT_NAME		varchar(30)		NOT NULL
, CREATE_DATE		timestamp 		DEFAULT CURRENT_TIMESTAMP()		NOT NULL
, APPEND_NEW_EVENTS_FLG		ENUM('Y','N')		DEFAULT 'Y'	NOT NULL
, DEFAULT_SEVERITY_ID		integer							NULL
, PRIMARY KEY ( INCIDENT_TYPE_ID )
, UNIQUE KEY `SIT_COMP_INCIDENT_UI` ( COMPONENT_ID, INCIDENT_NAME )
, CONSTRAINT SIT_COMPONENT_ID_FK
	FOREIGN KEY ( COMPONENT_ID )
    REFERENCES STD_COMPONENT ( COMPONENT_ID )
, CONSTRAINT SIT_SEVERITY_ID_FK
	FOREIGN KEY ( DEFAULT_SEVERITY_ID )
    REFERENCES STD_SEVERITY ( SEVERITY_ID )
);


-- =========================
-- STD_Contact_Type
-- =========================
CREATE TABLE IF NOT EXISTS STD_CONTACT_TYPE (
  CONTACT_TYPE_ID		integer				NOT NULL	auto_increment
, CONTACT_TYPE_NAME		varchar(30)			NOT NULL
, CREATE_DATE			timestamp 			DEFAULT CURRENT_TIMESTAMP()		NOT NULL
, PRIMARY KEY ( CONTACT_TYPE_ID )
, UNIQUE KEY `SCT_CONTACT_TYPE_NAME_UI` ( CONTACT_TYPE_NAME )
);

INSERT INTO STD_CONTACT_TYPE ( CONTACT_TYPE_NAME )
SELECT 'EMAIL'
UNION SELECT 'PHONE'
UNION SELECT 'TEXT';

commit;

-- =========================
-- STD_Message_Type
-- =========================
CREATE TABLE IF NOT EXISTS STD_MESSAGE_TYPE (
  MESSAGE_TYPE_ID		integer				NOT NULL	auto_increment
, MESSAGE_TYPE_NAME		varchar(30)			NOT NULL
, CREATE_DATE			timestamp 			DEFAULT CURRENT_TIMESTAMP()		NOT NULL
, PRIMARY KEY ( MESSAGE_TYPE_ID )
, UNIQUE KEY `SCT_CONTACT_TYPE_NAME_UI` ( MESSAGE_TYPE_NAME )
);

INSERT INTO STD_MESSAGE_TYPE ( MESSAGE_TYPE_NAME )
SELECT 'INCIDENT'
UNION SELECT 'USER-TO-USER';

commit;


-- =========================
-- User_Login
--    MD5 generates a 128-bit hash value. You can use CHAR(32) or BINARY(16)
--    SHA-1 generates a 160-bit hash value. You can use CHAR(40) or BINARY(20)
--    SHA-224 generates a 224-bit hash value. You can use CHAR(56) or BINARY(28)
--    SHA-256 generates a 256-bit hash value. You can use CHAR(64) or BINARY(32)
--    SHA-384 generates a 384-bit hash value. You can use CHAR(96) or BINARY(48)
--    SHA-512 generates a 512-bit hash value. You can use CHAR(128) or BINARY(64)
-- =========================
CREATE TABLE IF NOT EXISTS USER_LOGIN (
  USER_ID					integer				NOT NULL	auto_increment
, EMAIL_ADDRESS				varchar(60)			NOT NULL
, FIRST_NAME				varchar(80)
, LAST_NAME					varchar(80)
, CREATE_DATE				TIMESTAMP	DEFAULT CURRENT_TIMESTAMP()		NOT NULL
, EXPIRE_DATE				TIMESTAMP         NULL
, LAST_PASSWORD_RESET_DATE	TIMESTAMP         NULL
, RESET_PASSWORD_FLG		ENUM('Y','N')	DEFAULT 'Y'		NOT NULL
, PASSWORD					binary(64)			NOT NULL
, TOKEN						binary(64)			NULL
, PRIMARY KEY ( USER_ID )
, UNIQUE KEY `UL_EMAIL_ADDRESS_UI` ( EMAIL_ADDRESS )
);

-- =========================
-- User_Contact
-- =========================
CREATE TABLE IF NOT EXISTS USER_CONTACT (
  USER_CONTACT_ID	integer			NOT NULL	auto_increment
, USER_ID			integer			NOT NULL
, CONTACT_TYPE_ID	integer			NOT NULL
, CONTACT_DETAIL	varchar(80)
, SORT_ORDER		integer			NOT NULL
, CREATE_DATE				TIMESTAMP	DEFAULT CURRENT_TIMESTAMP()		NOT NULL
, PRIMARY KEY ( USER_CONTACT_ID )
, CONSTRAINT UC_USER_ID_FK
	FOREIGN KEY ( USER_ID )
    REFERENCES USER_LOGIN ( USER_ID )
, CONSTRAINT UC_CONTACT_TYPE_ID_FK
	FOREIGN KEY ( CONTACT_TYPE_ID )
    REFERENCES STD_CONTACT_TYPE ( CONTACT_TYPE_ID )
);

-- =========================
-- User_Activity
-- =========================
CREATE TABLE IF NOT EXISTS USER_ACTIVITY (
  USER_ACTIVITY_ID		integer			NOT NULL	AUTO_INCREMENT
, USER_ID				integer			NOT NULL
, ACTIVITY_DETAIL		varchar(255)	NOT NULL
, CREATE_DATE				TIMESTAMP	DEFAULT CURRENT_TIMESTAMP()		NOT NULL
, PRIMARY KEY ( USER_ACTIVITY_ID )
, INDEX ( USER_ID )
, CONSTRAINT UA_USER_ID_FK
	FOREIGN KEY ( USER_ID )
    REFERENCES USER_LOGIN ( USER_ID )
);


-- =========================
-- Rules
-- =========================
/*
CREATE TABLE IF NOT EXISTS RULES (
  RULE_ID		integer			NOT NULL	AUTO_INCREMENT
, EVENT_APPLICATION		varchar(30) 	NOT NULL
, EVENT_COMPONENT			varchar(30) 	NOT NULL
, EVENT_TYPE		varchar(30)		NOT NULL
, INCIDENT_APPLICATION		varchar(30) 	NOT NULL
, INCIDENT_COMPONENT			varchar(30) 	NOT NULL
, INCIDENT_TYPE		varchar(30)		NOT NULL
, PRIMARY KEY ( RULE_ID )
, CONSTRAINT R_APPL_COMP_EVENT_FK
	FOREIGN KEY ( EVENT_APPLICATION, EVENT_COMPONENT, EVENT_TYPE)
    REFERENCES STD_EVENT (APPLICATION, COMPONENT, EVENT_TYPE)
, CONSTRAINT R_APPL_COMP_INCIDENT_FK
	FOREIGN KEY ( INCIDENT_APPLICATION, INCIDENT_COMPONENT, INCIDENT_TYPE)
    REFERENCES STD_INCIDENT (APPLICATION, COMPONENT, INCIDENT_TYPE)
);
*/


-- =========================
-- Event
-- =========================
CREATE TABLE IF NOT EXISTS EVENT (
  EVENT_ID				integer			NOT NULL	AUTO_INCREMENT
, EVENT_TYPE_ID			integer			NOT NULL
, EVENT_REPORTED_DATE	TIMESTAMP		NULL
, CREATE_DATE			TIMESTAMP		DEFAULT CURRENT_TIMESTAMP()		NOT NULL
, EVENT_DETAIL			varchar(255)	NOT NULL
, PRIMARY KEY ( EVENT_ID )
, CONSTRAINT E_EVENT_TYPE_ID_FK
	FOREIGN KEY ( EVENT_TYPE_ID )
    REFERENCES STD_EVENT_TYPE ( EVENT_TYPE_ID )
);

-- =========================
-- Incident
-- =========================
CREATE TABLE IF NOT EXISTS INCIDENT (
  INCIDENT_ID				integer			NOT NULL	AUTO_INCREMENT
, INCIDENT_TYPE_ID			integer			NOT NULL
, SEVERITY_ID				integer			NOT NULL
, INCIDENT_DATE				TIMESTAMP		NULL
, INCIDENT_RESOLVED_DATE	TIMESTAMP		NULL
, CREATE_DATE				TIMESTAMP		DEFAULT CURRENT_TIMESTAMP()		NOT NULL
, INCIDENT_DETAIL			varchar(255)	NOT NULL
, PRIMARY KEY ( INCIDENT_ID )
, CONSTRAINT I_INCIDENT_TYPE_ID_FK
	FOREIGN KEY ( INCIDENT_TYPE_ID )
    REFERENCES STD_INCIDENT_TYPE ( INCIDENT_TYPE_ID )
, CONSTRAINT I_SEVERITY_TYPE_ID_FK
	FOREIGN KEY ( SEVERITY_ID )
    REFERENCES STD_SEVERITY ( SEVERITY_ID )
);


-- =========================
-- Incident Event
-- =========================
CREATE TABLE IF NOT EXISTS INCIDENT_EVENT (
  INCIDENT_EVENT_ID		integer			NOT NULL	AUTO_INCREMENT
, INCIDENT_ID			integer			NOT NULL
, EVENT_ID				integer			NOT NULL
, CREATE_DATE			TIMESTAMP		DEFAULT CURRENT_TIMESTAMP()		NOT NULL
, PRIMARY KEY ( INCIDENT_EVENT_ID )
, UNIQUE KEY ( INCIDENT_ID, EVENT_ID )
, CONSTRAINT IE_INCIDENT_ID_FK
	FOREIGN KEY ( INCIDENT_ID )
    REFERENCES INCIDENT ( INCIDENT_ID )
, CONSTRAINT IE_EVENT_ID_FK
	FOREIGN KEY ( EVENT_ID )
    REFERENCES EVENT ( EVENT_ID )
);

-- =========================
-- Incident Assigment
-- =========================
CREATE TABLE IF NOT EXISTS INCIDENT_ASSIGNMENT (
  INCIDENT_ASSIGNMENT_ID	integer			NOT NULL	AUTO_INCREMENT
, INCIDENT_ID				integer			NOT NULL
, USER_ID					integer			NOT NULL
, CREATE_DATE			TIMESTAMP		DEFAULT CURRENT_TIMESTAMP()		NOT NULL
, ASSIGNMENT_TASK		varchar(80)			NULL
, PRIMARY KEY ( INCIDENT_ASSIGNMENT_ID )
, CONSTRAINT IR_INCIDENT_ID_FK
	FOREIGN KEY ( INCIDENT_ID )
    REFERENCES INCIDENT ( INCIDENT_ID )
, CONSTRAINT IR_USER_ID_FK
	FOREIGN KEY ( USER_ID )
    REFERENCES USER_LOGIN ( USER_ID )
);

-- =========================
-- Incident Assigment
-- =========================
CREATE TABLE IF NOT EXISTS INCIDENT_ASSIGNMENT (
  INCIDENT_ASSIGNMENT_ID	integer			NOT NULL	AUTO_INCREMENT
, INCIDENT_ID				integer			NOT NULL
, USER_ID					integer			NOT NULL
, CREATE_DATE			TIMESTAMP		DEFAULT CURRENT_TIMESTAMP()		NOT NULL
, ASSIGNMENT_TASK		varchar(80)			NULL
, PRIMARY KEY ( INCIDENT_ASSIGNMENT_ID )
, CONSTRAINT IR_INCIDENT_ID_FK
	FOREIGN KEY ( INCIDENT_ID )
    REFERENCES INCIDENT ( INCIDENT_ID )
, CONSTRAINT IR_USER_ID_FK
	FOREIGN KEY ( USER_ID )
    REFERENCES USER_LOGIN ( USER_ID )
);

/*
-- =========================
-- Subscription
-- =========================
CREATE TABLE IF NOT EXISTS SUBSCRIPTION (
  SUBSCRIPTION_ID		integer			NOT NULL	AUTO_INCREMENT
, APPLICATION		varchar(30) 	NOT NULL
, COMPONENT			varchar(30) 	NOT NULL
, INCIDENT_TYPE		varchar(30)		NOT NULL
, LOGIN				varchar(60)		NOT NULL
, PRIMARY KEY ( SUBSCRIPTION_ID )
, CONSTRAINT S_APPL_COMP_INCIDENT_TYPE_FK
	FOREIGN KEY ( APPLICATION, COMPONENT, INCIDENT_TYPE )
    REFERENCES STD_INCIDENT ( APPLICATION, COMPONENT, INCIDENT_TYPE )
);

CREATE UNIQUE INDEX S_APPL_COMP_INCIDENT_UI
ON SUBSCRIPTION ( APPLICATION, COMPONENT, INCIDENT_TYPE );

-- =========================
-- Message
-- =========================
CREATE TABLE IF NOT EXISTS MESSAGE (
  MESSAGE_ID			integer			NOT NULL		AUTO_INCREMENT
, MESSAGE_SENT_FLG		ENUM('Y','N')	DEFAULT 'N'		NULL
, MESSAGE_SENT_DATE		TIMESTAMP
, PRIMARY KEY ( MESSAGE_ID )
);

-- =========================
-- Message Detail
-- =========================
CREATE TABLE IF NOT EXISTS MESSAGE_DETAIL (
  MESSAGE_DETAIL_ID			integer			NOT NULL		AUTO_INCREMENT
, MESSAGE_ID				integer			NOT NULL
, LOGIN						varchar(60)		NOT NULL
, MESSAGE_DETAIL_SENT_FLG	ENUM('Y','N')	DEFAULT 'N'		NOT NULL
, MESSAGE_DETAIL_SENT_DATE	TIMESTAMP
, PRIMARY KEY ( MESSAGE_DETAIL_ID )
, CONSTRAINT MD_MESSAGE_ID_FK
	FOREIGN KEY ( MESSAGE_ID )
    REFERENCES MESSAGE ( MESSAGE_ID )
, CONSTRAINT MD_LOGIN_FK
	FOREIGN KEY ( LOGIN )
    REFERENCES USER_LOGIN ( LOGIN )
);

-- =========================
-- Message User to User
-- =========================
CREATE TABLE IF NOT EXISTS MESSAGE_USER_TO_USER (
  MESSAGE_USER_TO_USER_ID	integer			NOT NULL		AUTO_INCREMENT
, MESSAGE_ID				integer			NOT NULL
, LOGIN						varchar(60)		NOT NULL
, MESSAGE_USER_TO_USER_SENT_FLG		ENUM('Y','N')	DEFAULT 'N'		NOT NULL
, MESSAGE_USER_TO_USER_SENT_DATE	TIMESTAMP
, FROM_LOGIN				varchar(60)
, PRIMARY KEY ( MESSAGE_USER_TO_USER_ID )
, CONSTRAINT MUUI_MESSAGE_ID_FK
	FOREIGN KEY ( MESSAGE_ID )
    REFERENCES MESSAGE ( MESSAGE_ID )
, CONSTRAINT MUUI_LOGIN_FK
	FOREIGN KEY ( LOGIN )
    REFERENCES USER_LOGIN ( LOGIN )
, CONSTRAINT MUUI_FROM_LOGIN_FK
	FOREIGN KEY ( FROM_LOGIN )
    REFERENCES USER_LOGIN ( LOGIN )
);
*/

